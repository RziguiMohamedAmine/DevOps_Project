pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'  // Use the correct tool name defined in Jenkins
    }
    environment {
        GIT_REPO = 'https://github.com/RziguiMohamedAmine/DevOps_Project.git'
        GIT_CREDENTIAL_ID = 'Jenkins'
        BRANCH_NAME = 'activityModule'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        dir('DevOps_Project') {
                            checkout([$class: 'GitSCM', branches: [[name: "$BRANCH_NAME"]], userRemoteConfigs: [[url: "$GIT_REPO", credentialsId: GIT_CREDENTIAL_ID]]])
                        }
                    }
                }
            }
        }

        stage('Compile') {
             steps {
                script {
                   
                    def mavenTool = tool name: 'M2_HOME', type: 'maven'

                    withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
                     
                        dir('DevOps_Project') {
                            sh 'mvn compile'
                        }
                    }
                }
            }
        }
//runnnnnnnnnssss
        //  stage('SonarQube Analysis') {
        //     steps {
        //         // Run the SonarQube scanner to analyze the code
        //         script {
        //             // Use the SonarQube Scanner tool that you've configured in Jenkins.
        //             def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

        //             // Run the SonarQube analysis
        //             withEnv(["PATH+SONAR_RUNNER=${scannerHome}/bin"]) {
        //                dir('DevOps_Project') { 
        //                 sh 'mvn clean verify sonar:sonar -Dsonar.host.url=http://192.168.33.10:9000 -Dsonar.login=sqa_4a8a2f824e2d4c5d25101d09ecd5818dce546bb9'
        //             }
        //             }
        //         }
        //     }
        // }
//runnnnnnnssssssss
    //     stage('Run Unit Tests') {
    //         steps {
    //             script {
    //                 def mavenTool = tool name: 'M2_HOME', type: 'maven'

    //                 withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
    //                     dir('DevOps_Project') {
    //                         sh 'mvn test'
    //                     }
    //                 }
                    
    //             }
    //     }
    // }
////runssssssssssssssss
   stage('Build Artifact') {
    steps {
        script {
            def mavenTool = tool name: 'M2_HOME', type: 'maven'
            def artifactDir = 'target' // The directory where the JAR file will be generated

            // Change the working directory to your project's directory (where the POM file is located)
            dir('DevOps_Project/DevOps_Project') {
                withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
                    sh "mvn package" // Build the JAR file
                }
            }

            archiveArtifacts artifacts: "${artifactDir}/*.jar", allowEmptyArchive: true
        }
    }
}


///NOT IN USE
        // stage('Clean and Build') {
        //     steps {
        //         script {
        //             // Use the 'M2_HOME' tool defined in the 'tools' section
        //             def mavenTool = tool name: 'M2_HOME', type: 'maven'

        //             withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
        //                 dir('DevOps_Project') {
        //                 sh 'mvn clean package'
        //                 }
        //             }
        //         }
        //     }
        // }

//////dosent't run
        //  stage('Nexus') {
        //    steps {
        //     script {
        //     // Check if the 'maven-releases' repository already exists
        //     def repositoryExists = sh(command: 'docker exec -it nexus3 /nexus-data/bin/nexus3 list-repositories', captureOutput: true).contains('maven-releases')

        //     // Create the repository if it doesn't exist
        //     if (!repositoryExists) {
        //         sh 'docker exec -it nexus3 /nexus-data/bin/nexus3 create-repository --name maven-releases'
        //     }

        //     // Use the 'M2_HOME' tool defined in the 'tools' section
        //     def mavenTool = tool name: 'M2_HOME', type: 'maven'

        //     withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
        //         dir('DevOps_Project') {
        //             // Deploy the artifact to the 'maven-releases' repository
        //             sh 'mvn deploy -DnexusUrl=http://192.168.33.10:8081/repository/maven-releases/'
        //         }
        //     }
        //     }
        //     }
        // }
    
//     stage('Deploy with Docker Compose') {
//     steps {
//         script {
//             // Use Docker Compose to deploy your application
//             dir('DevOps_Project') {
//                 // Ensure Docker Compose is installed
//                 sh 'docker-compose --version'

//                 // Use Docker Compose to start your containers
//                 sh 'docker-compose up -d'

//                 // You can also include other Docker Compose commands, such as 'docker-compose build' or 'docker-compose down'
//             }
//         }
//     }
// }



 stage('Deploy Docker Image') {
            steps {
                script {
                    def mavenTool = tool name: 'M2_HOME', type: 'maven'
                    def artifactDir = 'activityModule/DevOps_Project/target'

                    dir('activityModule/DevOps_Project/DevOps_Project') {
                        withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
                            // Build the Docker image
                           sh "docker build -t activ:activ -f Dockerfile ."

                            // Deploy the containers using Docker Compose
                            sh "docker-compose up -d"
                        }
                    }
                }
            }
        }




        
    }


}


