pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'  // Use the correct tool name defined in Jenkins
    }
    environment {
        GIT_REPO = 'https://github.com/RziguiMohamedAmine/DevOps_Project.git'
        GIT_CREDENTIAL_ID = 'Jenkins'
        BRANCH_NAME = 'activityModule'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        dir('DevOps_Project') {
                            checkout([$class: 'GitSCM', branches: [[name: "$BRANCH_NAME"]], userRemoteConfigs: [[url: "$GIT_REPO", credentialsId: GIT_CREDENTIAL_ID]]])
                        }
                    }
                }
            }
        }

         ////runssssssssssssssss
//    stage('Build Artifact') {
//     steps {
//         script {
//             def mavenTool = tool name: 'M2_HOME', type: 'maven'
//             def artifactDir = 'target' // The directory where the JAR file will be generated

//             // Change the working directory to your project's directory (where the POM file is located)
//             dir('DevOps_Project') {
//                 echo "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW${pwd()}"

//                 withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
//                     sh "mvn install" // Build the JAR file
                
            

//             archiveArtifacts artifacts: "${artifactDir}/devops_project.jar", allowEmptyArchive: true
//             }
//         }
//         }
//     }
//     }
// //runnnnnnnssssssss
//         stage('Run Unit Tests') {
//             steps {
//                 script {
//                     def mavenTool = tool name: 'M2_HOME', type: 'maven'

//                     withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
//                         dir('DevOps_Project') {
//                             sh 'mvn test'
//                         }
//                     }
                    
//                 }
//         }
//     }



      
// //runnnnnnnnnssss
//          stage('SonarQube Analysis') {
//             steps {
//                 // Run the SonarQube scanner to analyze the code
//                 script {
//                     // Use the SonarQube Scanner tool that you've configured in Jenkins.
//                     def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

//                     // Run the SonarQube analysis
//                     withEnv(["PATH+SONAR_RUNNER=${scannerHome}/bin"]) {
//                        dir('DevOps_Project') { 
//                         sh 'mvn clean verify sonar:sonar -Dsonar.host.url=http://192.168.33.10:9000 -Dsonar.login=sqa_4a8a2f824e2d4c5d25101d09ecd5818dce546bb9'
//                     }
//                     }
//                 }
//             }
//         }

       


///NOT IN USE
        // stage('Clean and Build') {
        //     steps {
        //         script {
        //             // Use the 'M2_HOME' tool defined in the 'tools' section
        //             def mavenTool = tool name: 'M2_HOME', type: 'maven'

        //             withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
        //                 dir('DevOps_Project') {
        //                 sh 'mvn clean package'
        //                 }
        //             }
        //         }
        //     }
        // }

     //////dosent't run
//         stage('Nexus') {
//   steps {
//     script {
//       // Check if the 'maven-releases' repository already exists
    

//       // Use the 'M2_HOME' tool defined in the 'tools' section
//       def mavenTool = tool name: 'M2_HOME', type: 'maven'

//       withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
//         dir('DevOps_Project') {
//           // Deploy the artifact to the 'maven-releases' repository
//           sh 'mvn deploy '
//         }
//       }
//     }
//   }
// }




    // build docker image 
    // RRUUNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    // stage('Build Docker Image') {
    //     steps {
    //         script {
    //           dir('DevOps_Project') {
    //             // Build the Docker image
    //             sh 'docker build -t wassimdhaouadi/devops_project .'
    //         }
    //         }
    //     }
    // }

    // stage('PUSH Docker Image to HUB') {
    //     steps {
    //         script {
    //           dir('DevOps_Project') {
    //            withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
             
    //             // Push the Docker image to Docker Hub
    //             sh 'docker login -u wassimdhaouadi -p ${dockerhubpwd}'
    //             sh 'docker push wassimdhaouadi/devops_project'}
    //         }
    //         }
    //     }
    // }

        stage('DOCKER COMPOSE') {
            steps {
               
        dir('DevOps_Project') {
        // Utilisez la commande 'docker build' pour construire l'image
                
                sh 'docker compose up -d'
        }
              

       
      }
     }

     



stage('Grafana Prometheus') {
            steps {
                sh 'docker start prometheus'
                sh 'docker start grafana'
            }
        }
        
         
     
    }
    post {
    always {
    script {
        // Call the sendCustomizedEmail method directly
        
        
        publishHTML(
            target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'DevOps_Project/target/site/jacoco',
                reportFiles: 'index.html',
                reportName: 'Jacoco Code Coverage Report'
            ]
        )
        sendCustomizedEmail()
    }
}

}


}
def sendCustomizedEmail() {
    script {
        def originalHtml = readFile file: "DevOps_Project/target/site/jacoco/index.html"
        def modifiedHtmlPath = customizeHtml(originalHtml)

        emailext (
            to: "mohamedwassim.dhaouadi@esprit.tn",
            mimeType: 'text/html',
            subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
            body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Build Status: ${currentBuild.result}</p>
                <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>;</p>
                <img src="https://www.phpro.be/uploads/media/sulu-400x400/09/469-jenkins%404x.png?v=1-0?62b3251db82aa489a7ee194a74cc6fb1" alt="jenkins">""",
            attachmentsPattern: modifiedHtmlPath
        )
    }
}

def customizeHtml(String reportContent) {
    // Your existing customizeHtml method
    def customHtml = """
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
        <head>
            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
            <style>
                /* Add your custom CSS styles here */
                body {
                    font-family: Arial, sans-serif;
                }
                table {
                    width: 100%; /* Set the width to 100% to make it start from the far left */
                    border-collapse: collapse;
                }
                th, td {
                    border: 1px solid #dddddd;
                    text-align: left;
                    padding: 8px;
                }
                th {
                    background-color: #f2f2f2;
                }
                a {
                    color: white;
                    text-decoration: none;
                    box-shadow: inset 0 -1px 0 hsla(0, 0%, 100%, 0.4);
                }
                a:hover {
                    box-shadow: inset 0 -1.2em 0 hsla(0, 0%, 100%, 0.4);
                }
                ul {
                    display: inline-grid;
                    grid-auto-flow: row;
                    grid-gap: 24px;
                    justify-items: center;
                    margin: auto;
                }
                @media (min-width: 500px) {
                    ul {
                        grid-auto-flow: column;
                    }
                }
                li:last-child {
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                }
                li:hover ~ li p {
                    animation: wave-animation 0.3s infinite;
                }
                /* below is just for demo styling */
               
                @keyframes wave-animation {
                    0%, 100% {
                        transform: rotate(0deg);
                    }
                    25% {
                        transform: rotate(20deg);
                    }
                    75% {
                        transform: rotate(-15deg);
                    }
                }

                /* Footer styles */
                .divfooter {
                    display: flex;
                    height: 100vh;
                    width: 100%;
                    background-color: #002a38;
                    line-height: 1.3;
                    font-family: Menlo, monospace;
                }
                ul.footer {
                    display: inline-grid;
                    grid-auto-flow: row;
                    grid-gap: 24px;
                    justify-items: center;
                    margin: auto;
                }
                @media (min-width: 500px) {
                    ul.footer {
                        grid-auto-flow: column;
                    }
                }
                lifooter {
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                }
                lifooter:hover ~ li p {
                    animation: wave-animation 0.3s infinite;
                }
            </style>
        </head>
        <body onload="initialSort(['breadcrumb', 'coveragetable'])">
            $reportContent
            <footer>
                <div class="divfooter">
                    <ul class="footer">
                        <lifooter><a href="https://twitter.com/">Twitter</a></lifooter>
                        <lifooter><a href="https://codepen.io/">Codepen</a></lifooter>
                        <lifooter><a href="mailto:mohamedwassim.dhaouadi@gmail.com">Email</a></lifooter>
                        <lifooter><a href="https://github.com/wassim20">Github</a></lifooter>
                        <lifooter>
                            <p>👋</p>
                        </lifooter>
                    </ul>
                </div>
            </footer>
        </body>
        </html>
    """

    // Write the customized HTML to a file
    def outputFile = 'modifiedHtml.html'
    writeFile file: outputFile, text: customHtml

    // Return the file path
    return outputFile
}
