pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'  // Use the correct tool name defined in Jenkins
    }
    environment {
        GIT_REPO = 'https://github.com/RziguiMohamedAmine/DevOps_Project.git'
        GIT_CREDENTIAL_ID = 'Jenkins'
        BRANCH_NAME = 'activityModule'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        dir('DevOps_Project') {
                            checkout([$class: 'GitSCM', branches: [[name: "$BRANCH_NAME"]], userRemoteConfigs: [[url: "$GIT_REPO", credentialsId: GIT_CREDENTIAL_ID]]])
                        }
                    }
                }
            }
        }

         ////runssssssssssssssss
   stage('Build Artifact') {
    steps {
        script {
            def mavenTool = tool name: 'M2_HOME', type: 'maven'
            def artifactDir = 'target' // The directory where the JAR file will be generated

            // Change the working directory to your project's directory (where the POM file is located)
            dir('DevOps_Project') {
                echo "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW${pwd()}"

                withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
                    sh "mvn install" // Build the JAR file
                
            

            archiveArtifacts artifacts: "${artifactDir}/devops_project.jar", allowEmptyArchive: true
            }
        }
        }
    }
    }
//runnnnnnnssssssss
        stage('Run Unit Tests') {
            steps {
                script {
                    def mavenTool = tool name: 'M2_HOME', type: 'maven'

                    withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
                        dir('DevOps_Project') {
                            sh 'mvn test'
                        }
                    }
                    
                }
        }
    }



      
//runnnnnnnnnssss
         stage('SonarQube Analysis') {
            steps {
                // Run the SonarQube scanner to analyze the code
                script {
                    // Use the SonarQube Scanner tool that you've configured in Jenkins.
                    def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

                    // Run the SonarQube analysis
                    withEnv(["PATH+SONAR_RUNNER=${scannerHome}/bin"]) {
                       dir('DevOps_Project') { 
                        sh 'mvn clean verify sonar:sonar -Dsonar.host.url=http://192.168.33.10:9000 -Dsonar.login=sqa_4a8a2f824e2d4c5d25101d09ecd5818dce546bb9'
                    }
                    }
                }
            }
        }

       


///NOT IN USE
        // stage('Clean and Build') {
        //     steps {
        //         script {
        //             // Use the 'M2_HOME' tool defined in the 'tools' section
        //             def mavenTool = tool name: 'M2_HOME', type: 'maven'

        //             withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
        //                 dir('DevOps_Project') {
        //                 sh 'mvn clean package'
        //                 }
        //             }
        //         }
        //     }
        // }

     //////dosent't run
//         stage('Nexus') {
//   steps {
//     script {
//       // Check if the 'maven-releases' repository already exists
    

//       // Use the 'M2_HOME' tool defined in the 'tools' section
//       def mavenTool = tool name: 'M2_HOME', type: 'maven'

//       withEnv(["PATH+MAVEN=${mavenTool}/bin"]) {
//         dir('DevOps_Project') {
//           // Deploy the artifact to the 'maven-releases' repository
//           sh 'mvn deploy '
//         }
//       }
//     }
//   }
// }




    // build docker image 
    // RRUUNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    stage('Build Docker Image') {
        steps {
            script {
              dir('DevOps_Project') {
                // Build the Docker image
                sh 'docker build -t wassimdhaouadi/devops_project .'
            }
            }
        }
    }

    stage('PUSH Docker Image to HUB') {
        steps {
            script {
              dir('DevOps_Project') {
               withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
             
                // Push the Docker image to Docker Hub
                sh 'docker login -u wassimdhaouadi -p ${dockerhubpwd}'
                sh 'docker push wassimdhaouadi/devops_project'}
            }
            }
        }
    }

        stage('DOCKER COMPOSE') {
            steps {
               
        dir('DevOps_Project') {
        // Utilisez la commande 'docker build' pour construire l'image
                
                sh 'docker compose up -d'
        }
              

       
      }
     }

     



stage('Grafana Prometheus') {
            steps {
                sh 'docker start prometheus'
                sh 'docker start grafana'
            }
        }
        
         
     
    }
    post {
        always {
            publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: '.DevOps_Project/target/site/jacoco',
                reportFiles: 'index.html',
                reportName: 'Jacoco Code Coverage Report'
            ])
            
        }
    }
} 
